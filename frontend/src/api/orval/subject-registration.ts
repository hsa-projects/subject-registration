/**
 * Generated by orval v6.7.1 üç∫
 * Do not edit manually.
 * OpenAPI definition
 * OpenAPI spec version: v0
 */
import {
  useQuery,
  useMutation,
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey
} from 'react-query'
import type {
  SubjectTO,
  SubjectUpdateTO,
  NewSubjectTO,
  RegistrationWindowTO,
  RegistrationWindowUpdateTO,
  NewRegistrationWindowTO,
  RegistrationTO,
  RegistrationUpdateTO,
  NewRegistrationTO
} from './subject-registration.schemas'
import { customInstance, ErrorType } from './custom-client'

// eslint-disable-next-line @typescript-eslint/no-explicit-any
type AsyncReturnType<
T extends (...args: any) => Promise<any>
> = T extends (...args: any) => Promise<infer R> ? R : any;


/**
 * @summary Get list of all Subjects
 */
export const getAllSubjects = (
    
 ) => {
      return customInstance<SubjectTO[]>(
      {url: `/api/subject`, method: 'get'
    },
      );
    }
  

export const getGetAllSubjectsQueryKey = () => [`/api/subject`];

    
export type GetAllSubjectsQueryResult = NonNullable<AsyncReturnType<typeof getAllSubjects>>
export type GetAllSubjectsQueryError = ErrorType<unknown>

export const useGetAllSubjects = <TData = AsyncReturnType<typeof getAllSubjects>, TError = ErrorType<unknown>>(
  options?: { query?:UseQueryOptions<AsyncReturnType<typeof getAllSubjects>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options || {}

  const queryKey = queryOptions?.queryKey ?? getGetAllSubjectsQueryKey();

  

  const queryFn: QueryFunction<AsyncReturnType<typeof getAllSubjects>> = () => getAllSubjects();

  const query = useQuery<AsyncReturnType<typeof getAllSubjects>, TError, TData>(queryKey, queryFn, queryOptions)

  return {
    queryKey,
    ...query
  }
}


/**
 * @summary Update an existing subject
 */
export const updateSubject = (
    subjectUpdateTO: SubjectUpdateTO,
 ) => {
      return customInstance<SubjectTO>(
      {url: `/api/subject`, method: 'put',
      headers: {'Content-Type': 'application/json'},
      data: subjectUpdateTO
    },
      );
    }
  


    export type UpdateSubjectMutationResult = NonNullable<AsyncReturnType<typeof updateSubject>>
    export type UpdateSubjectMutationBody = SubjectUpdateTO
    export type UpdateSubjectMutationError = ErrorType<unknown>

    export const useUpdateSubject = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<AsyncReturnType<typeof updateSubject>, TError,{data: SubjectUpdateTO}, TContext>, }
) => {
      const {mutation: mutationOptions} = options || {}

      


      const mutationFn: MutationFunction<AsyncReturnType<typeof updateSubject>, {data: SubjectUpdateTO}> = (props) => {
          const {data} = props || {};

          return  updateSubject(data,)
        }

      return useMutation<AsyncReturnType<typeof updateSubject>, TError, {data: SubjectUpdateTO}, TContext>(mutationFn, mutationOptions)
    }
    
/**
 * @summary Create a new subject
 */
export const createSubject = (
    newSubjectTO: NewSubjectTO,
 ) => {
      return customInstance<SubjectTO>(
      {url: `/api/subject`, method: 'post',
      headers: {'Content-Type': 'application/json'},
      data: newSubjectTO
    },
      );
    }
  


    export type CreateSubjectMutationResult = NonNullable<AsyncReturnType<typeof createSubject>>
    export type CreateSubjectMutationBody = NewSubjectTO
    export type CreateSubjectMutationError = ErrorType<unknown>

    export const useCreateSubject = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<AsyncReturnType<typeof createSubject>, TError,{data: NewSubjectTO}, TContext>, }
) => {
      const {mutation: mutationOptions} = options || {}

      


      const mutationFn: MutationFunction<AsyncReturnType<typeof createSubject>, {data: NewSubjectTO}> = (props) => {
          const {data} = props || {};

          return  createSubject(data,)
        }

      return useMutation<AsyncReturnType<typeof createSubject>, TError, {data: NewSubjectTO}, TContext>(mutationFn, mutationOptions)
    }
    
/**
 * @summary Get list of all registration windows
 */
export const getAllRegistrationWindows = (
    
 ) => {
      return customInstance<RegistrationWindowTO[]>(
      {url: `/api/registration_window`, method: 'get'
    },
      );
    }
  

export const getGetAllRegistrationWindowsQueryKey = () => [`/api/registration_window`];

    
export type GetAllRegistrationWindowsQueryResult = NonNullable<AsyncReturnType<typeof getAllRegistrationWindows>>
export type GetAllRegistrationWindowsQueryError = ErrorType<unknown>

export const useGetAllRegistrationWindows = <TData = AsyncReturnType<typeof getAllRegistrationWindows>, TError = ErrorType<unknown>>(
  options?: { query?:UseQueryOptions<AsyncReturnType<typeof getAllRegistrationWindows>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options || {}

  const queryKey = queryOptions?.queryKey ?? getGetAllRegistrationWindowsQueryKey();

  

  const queryFn: QueryFunction<AsyncReturnType<typeof getAllRegistrationWindows>> = () => getAllRegistrationWindows();

  const query = useQuery<AsyncReturnType<typeof getAllRegistrationWindows>, TError, TData>(queryKey, queryFn, queryOptions)

  return {
    queryKey,
    ...query
  }
}


/**
 * @summary Update an existing registration window
 */
export const updateRegistrationWindow = (
    registrationWindowUpdateTO: RegistrationWindowUpdateTO,
 ) => {
      return customInstance<RegistrationWindowTO>(
      {url: `/api/registration_window`, method: 'put',
      headers: {'Content-Type': 'application/json'},
      data: registrationWindowUpdateTO
    },
      );
    }
  


    export type UpdateRegistrationWindowMutationResult = NonNullable<AsyncReturnType<typeof updateRegistrationWindow>>
    export type UpdateRegistrationWindowMutationBody = RegistrationWindowUpdateTO
    export type UpdateRegistrationWindowMutationError = ErrorType<unknown>

    export const useUpdateRegistrationWindow = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<AsyncReturnType<typeof updateRegistrationWindow>, TError,{data: RegistrationWindowUpdateTO}, TContext>, }
) => {
      const {mutation: mutationOptions} = options || {}

      


      const mutationFn: MutationFunction<AsyncReturnType<typeof updateRegistrationWindow>, {data: RegistrationWindowUpdateTO}> = (props) => {
          const {data} = props || {};

          return  updateRegistrationWindow(data,)
        }

      return useMutation<AsyncReturnType<typeof updateRegistrationWindow>, TError, {data: RegistrationWindowUpdateTO}, TContext>(mutationFn, mutationOptions)
    }
    
/**
 * @summary Create a new registration window
 */
export const createNewRegistrationWindow = (
    newRegistrationWindowTO: NewRegistrationWindowTO,
 ) => {
      return customInstance<RegistrationWindowTO>(
      {url: `/api/registration_window`, method: 'post',
      headers: {'Content-Type': 'application/json'},
      data: newRegistrationWindowTO
    },
      );
    }
  


    export type CreateNewRegistrationWindowMutationResult = NonNullable<AsyncReturnType<typeof createNewRegistrationWindow>>
    export type CreateNewRegistrationWindowMutationBody = NewRegistrationWindowTO
    export type CreateNewRegistrationWindowMutationError = ErrorType<unknown>

    export const useCreateNewRegistrationWindow = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<AsyncReturnType<typeof createNewRegistrationWindow>, TError,{data: NewRegistrationWindowTO}, TContext>, }
) => {
      const {mutation: mutationOptions} = options || {}

      


      const mutationFn: MutationFunction<AsyncReturnType<typeof createNewRegistrationWindow>, {data: NewRegistrationWindowTO}> = (props) => {
          const {data} = props || {};

          return  createNewRegistrationWindow(data,)
        }

      return useMutation<AsyncReturnType<typeof createNewRegistrationWindow>, TError, {data: NewRegistrationWindowTO}, TContext>(mutationFn, mutationOptions)
    }
    
/**
 * @summary Get list of all Registrations
 */
export const getAllRegistrations = (
    
 ) => {
      return customInstance<RegistrationTO[]>(
      {url: `/api/registration`, method: 'get'
    },
      );
    }
  

export const getGetAllRegistrationsQueryKey = () => [`/api/registration`];

    
export type GetAllRegistrationsQueryResult = NonNullable<AsyncReturnType<typeof getAllRegistrations>>
export type GetAllRegistrationsQueryError = ErrorType<unknown>

export const useGetAllRegistrations = <TData = AsyncReturnType<typeof getAllRegistrations>, TError = ErrorType<unknown>>(
  options?: { query?:UseQueryOptions<AsyncReturnType<typeof getAllRegistrations>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options || {}

  const queryKey = queryOptions?.queryKey ?? getGetAllRegistrationsQueryKey();

  

  const queryFn: QueryFunction<AsyncReturnType<typeof getAllRegistrations>> = () => getAllRegistrations();

  const query = useQuery<AsyncReturnType<typeof getAllRegistrations>, TError, TData>(queryKey, queryFn, queryOptions)

  return {
    queryKey,
    ...query
  }
}


/**
 * @summary Update an existing registration
 */
export const updateRegistration = (
    registrationUpdateTO: RegistrationUpdateTO,
 ) => {
      return customInstance<RegistrationTO>(
      {url: `/api/registration`, method: 'put',
      headers: {'Content-Type': 'application/json'},
      data: registrationUpdateTO
    },
      );
    }
  


    export type UpdateRegistrationMutationResult = NonNullable<AsyncReturnType<typeof updateRegistration>>
    export type UpdateRegistrationMutationBody = RegistrationUpdateTO
    export type UpdateRegistrationMutationError = ErrorType<unknown>

    export const useUpdateRegistration = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<AsyncReturnType<typeof updateRegistration>, TError,{data: RegistrationUpdateTO}, TContext>, }
) => {
      const {mutation: mutationOptions} = options || {}

      


      const mutationFn: MutationFunction<AsyncReturnType<typeof updateRegistration>, {data: RegistrationUpdateTO}> = (props) => {
          const {data} = props || {};

          return  updateRegistration(data,)
        }

      return useMutation<AsyncReturnType<typeof updateRegistration>, TError, {data: RegistrationUpdateTO}, TContext>(mutationFn, mutationOptions)
    }
    
/**
 * @summary Create a new registration
 */
export const createNewRegistration = (
    newRegistrationTO: NewRegistrationTO,
 ) => {
      return customInstance<RegistrationTO>(
      {url: `/api/registration`, method: 'post',
      headers: {'Content-Type': 'application/json'},
      data: newRegistrationTO
    },
      );
    }
  


    export type CreateNewRegistrationMutationResult = NonNullable<AsyncReturnType<typeof createNewRegistration>>
    export type CreateNewRegistrationMutationBody = NewRegistrationTO
    export type CreateNewRegistrationMutationError = ErrorType<unknown>

    export const useCreateNewRegistration = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<AsyncReturnType<typeof createNewRegistration>, TError,{data: NewRegistrationTO}, TContext>, }
) => {
      const {mutation: mutationOptions} = options || {}

      


      const mutationFn: MutationFunction<AsyncReturnType<typeof createNewRegistration>, {data: NewRegistrationTO}> = (props) => {
          const {data} = props || {};

          return  createNewRegistration(data,)
        }

      return useMutation<AsyncReturnType<typeof createNewRegistration>, TError, {data: NewRegistrationTO}, TContext>(mutationFn, mutationOptions)
    }
    
/**
 * @summary Get registration by student
 */
export const getRegistration = (
    uid: string,
 ) => {
      return customInstance<RegistrationTO>(
      {url: `/api/registration/${uid}`, method: 'get'
    },
      );
    }
  

export const getGetRegistrationQueryKey = (uid: string,) => [`/api/registration/${uid}`];

    
export type GetRegistrationQueryResult = NonNullable<AsyncReturnType<typeof getRegistration>>
export type GetRegistrationQueryError = ErrorType<unknown>

export const useGetRegistration = <TData = AsyncReturnType<typeof getRegistration>, TError = ErrorType<unknown>>(
 uid: string, options?: { query?:UseQueryOptions<AsyncReturnType<typeof getRegistration>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options || {}

  const queryKey = queryOptions?.queryKey ?? getGetRegistrationQueryKey(uid);

  

  const queryFn: QueryFunction<AsyncReturnType<typeof getRegistration>> = () => getRegistration(uid, );

  const query = useQuery<AsyncReturnType<typeof getRegistration>, TError, TData>(queryKey, queryFn, {enabled: !!(uid), ...queryOptions})

  return {
    queryKey,
    ...query
  }
}


/**
 * @summary Delete an existing subject
 */
export const deleteSubject = (
    subjectName: string,
 ) => {
      return customInstance<void>(
      {url: `/api/subject/${subjectName}`, method: 'delete'
    },
      );
    }
  


    export type DeleteSubjectMutationResult = NonNullable<AsyncReturnType<typeof deleteSubject>>
    
    export type DeleteSubjectMutationError = ErrorType<unknown>

    export const useDeleteSubject = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<AsyncReturnType<typeof deleteSubject>, TError,{subjectName: string}, TContext>, }
) => {
      const {mutation: mutationOptions} = options || {}

      


      const mutationFn: MutationFunction<AsyncReturnType<typeof deleteSubject>, {subjectName: string}> = (props) => {
          const {subjectName} = props || {};

          return  deleteSubject(subjectName,)
        }

      return useMutation<AsyncReturnType<typeof deleteSubject>, TError, {subjectName: string}, TContext>(mutationFn, mutationOptions)
    }
    
/**
 * @summary Delete an existing registration window
 */
export const deleteRegistrationWindow = (
    registrationWindowId: string,
 ) => {
      return customInstance<void>(
      {url: `/api/registration_window/${registrationWindowId}`, method: 'delete'
    },
      );
    }
  


    export type DeleteRegistrationWindowMutationResult = NonNullable<AsyncReturnType<typeof deleteRegistrationWindow>>
    
    export type DeleteRegistrationWindowMutationError = ErrorType<unknown>

    export const useDeleteRegistrationWindow = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<AsyncReturnType<typeof deleteRegistrationWindow>, TError,{registrationWindowId: string}, TContext>, }
) => {
      const {mutation: mutationOptions} = options || {}

      


      const mutationFn: MutationFunction<AsyncReturnType<typeof deleteRegistrationWindow>, {registrationWindowId: string}> = (props) => {
          const {registrationWindowId} = props || {};

          return  deleteRegistrationWindow(registrationWindowId,)
        }

      return useMutation<AsyncReturnType<typeof deleteRegistrationWindow>, TError, {registrationWindowId: string}, TContext>(mutationFn, mutationOptions)
    }
    
/**
 * @summary Delete an existing registration
 */
export const deleteRegistration = (
    registrationId: string,
 ) => {
      return customInstance<void>(
      {url: `/api/registration/${registrationId}`, method: 'delete'
    },
      );
    }
  


    export type DeleteRegistrationMutationResult = NonNullable<AsyncReturnType<typeof deleteRegistration>>
    
    export type DeleteRegistrationMutationError = ErrorType<unknown>

    export const useDeleteRegistration = <TError = ErrorType<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<AsyncReturnType<typeof deleteRegistration>, TError,{registrationId: string}, TContext>, }
) => {
      const {mutation: mutationOptions} = options || {}

      


      const mutationFn: MutationFunction<AsyncReturnType<typeof deleteRegistration>, {registrationId: string}> = (props) => {
          const {registrationId} = props || {};

          return  deleteRegistration(registrationId,)
        }

      return useMutation<AsyncReturnType<typeof deleteRegistration>, TError, {registrationId: string}, TContext>(mutationFn, mutationOptions)
    }
    
